program = { SOI ~ (fun | struct_def)* ~ &EOI }

fun = { "fn" ~ ident ~ params ~ ("->" ~ ty)? ~ block }

params = {"(" ~ (vardef ~ ("," ~ vardef)*)? ~ ")"}

struct_def = { "struct" ~ ident ~ "{" ~ (vardef ~ "," )* ~ "}" }

block = { "{" ~ stmt* ~ (expr)? ~ "}" }

stmt = { while_loop | declare | assign | (expr ~ ";") }

while_loop = { "while" ~ expr ~ block }

assign = { expr ~ "=" ~ expr ~ ";" }

declare = { "var" ~ vardef ~ "=" ~ expr ~ ";" }

vardef = {ident ~ ":" ~ ty}

expr = { if_then | block | binop | with_postfix }

binop = { with_postfix ~ (infix ~ with_postfix)+ }

with_postfix = { primitive ~ (field_postfix | index_postfix | call_postfix | range_postfix)* }

primitive = { struct_instance | array | unit | integer | string | ident | "(" ~ expr ~ ")" }

field_postfix = { "." ~ ident }

index_postfix = { "[" ~ primitive ~ "]" }

call_postfix = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

range_postfix =  { ".." ~ expr }

struct_instance = { ident ~ "{" ~ (ident ~ ":" ~ expr ~ ",")* ~ "}" }

unit = { "()" }

integer = ${ '0'..'9' ~ ('0'..'9' | "_")* }

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

ty = { iter_ty | array_ty | int_ty | str_ty | bool_ty | unit | ident }

// Separate iter_ty from others because it is left recursive
iter_ty = { non_iter_ty ~ iter_tail+ }

iter_tail = { ".." }

non_iter_ty = { array_ty | int_ty | str_ty | bool_ty | unit | ident }

array_ty = { "[" ~ ty ~ "]" }

bool_ty = { "bool" }

str_ty = { "str" }

int_ty = { "int" }

keyword = { "var" | "struct" | "if" | "else" | "while" | "int" | "str" | "bool" | "fn" }

infix = _{ add | sub | mul | div | rem | pow | le | lt | ge | gt }

add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
rem = { "%" }
pow = { "^" }
le = { "<=" }
lt = { "<" }
ge = { ">=" }
gt = { ">" }
eq =  { "==" }
neq = { "!=" }

ident = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

if_then = { "if" ~ expr ~ block ~ ("else" ~ block) }

array = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

COMMENT = _{ ("//" ~ (!"\n" ~ ANY)* ~ "\n") | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }